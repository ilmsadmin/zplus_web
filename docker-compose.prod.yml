# Docker Compose for Production
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: zplus_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-zplus_web}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - zplus_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose ports in production - use nginx proxy
    ports: []

  redis:
    image: redis:7-alpine
    container_name: zplus_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data_prod:/data
    networks:
      - zplus_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Don't expose ports in production
    ports: []

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: zplus_backend_prod
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-zplus_web}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - PORT=3000
      - ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - API_VERSION=v1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zplus_network_prod
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    # Don't expose ports directly in production
    ports: []

  nginx:
    image: nginx:alpine
    container_name: zplus_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./backend/uploads:/var/www/uploads
    depends_on:
      - backend
    networks:
      - zplus_network_prod

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  zplus_network_prod:
    driver: bridge
